// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chickadee.Data;

#nullable disable

namespace chickadee.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221031065103_updatedSeedings")]
    partial class updatedSeedings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UnitId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1c3071e7-f6e4-45ed-86ef-2a2f58898efd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eec3cc4a-b5cf-4038-bf31-cd5dc58ecf72",
                            Email = "superadmin@chickadeeinvest.ca",
                            EmailConfirmed = true,
                            FirstName = "Matt",
                            LastName = "Hardwick",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@CHICKADEEINVEST.CA",
                            NormalizedUserName = "SUPERADMIN@CHICKADEEINVEST.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbB9yQirkbhfwBT7ntFjgMBc4W3x9YYcq0aB3tIeKxBUYDFnJEyWOGdQ6fRDZLxaQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "654d35fa-04e4-40a1-ad24-d9a4c4a62b2d",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@chickadeeinvest.ca",
                            UsernameChangeLimit = 10
                        },
                        new
                        {
                            Id = "97436b4a-0035-409b-9bd7-6133c7f30fdf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "261f1b90-316a-4e8e-91b6-88512f426aae",
                            Email = "propertymanager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Property",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKZeoRoxpL8+pN53whT/q9IhgspE33k+L+U/kta0Fink0v8Z7bq/NpTdh8tjvOgeYA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7d2bf15d-f2aa-4b23-99f4-925924819712",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager@gmail.com",
                            UsernameChangeLimit = 10
                        },
                        new
                        {
                            Id = "3b19b9ef-6382-4c6d-9bb8-5c2a0a72fcfe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07408596-1fbf-4913-88e1-d90d01da99e6",
                            Email = "propertymanager2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Property",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER2@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAze+KullzVCJGcoWTwo+/vfn11dxz8LGaCSjLrCJcnfHPsnFrrSy49YcdAId8Nt6w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "76e4bd3c-4f2d-4ba6-9544-31a55bf3f948",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager2@gmail.com",
                            UsernameChangeLimit = 10
                        },
                        new
                        {
                            Id = "1bc9c43c-d59d-4e87-9821-e3981c850e52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6da6e67e-fc09-452b-adad-f84338284ccd",
                            Email = "tenant@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tenant",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT@GMAIL.COM",
                            NormalizedUserName = "TENANT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE65k7LK5v5DR6rKTx/QcxvWzmUQ8NfjkF9dnhGZ1nd3Uyhn4e3KIZVYlIbOQFlYjA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6905b67e-7b91-4163-b1dd-5f688a8bff7c",
                            TwoFactorEnabled = false,
                            UnitId = 1,
                            UserName = "tenant@gmail.com",
                            UsernameChangeLimit = 10
                        },
                        new
                        {
                            Id = "5b5b3497-5650-4075-86d8-d7884615d1cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b140f7fd-0ff4-4d53-96a2-28b336c92f2b",
                            Email = "tenant2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "Tenant",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT2@GMAIL.COM",
                            NormalizedUserName = "TENANT2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELRJZXh920yr2AFs1KVn32pdau55mt89AAYwTclkKJgoSlqXOOzj/VcXPsQtJFW7JA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ce62ba04-e46c-428f-b23c-987f16d9d742",
                            TwoFactorEnabled = false,
                            UnitId = 2,
                            UserName = "tenant2@gmail.com",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("chickadee.Models.Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("IdPhoto")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsIdVerified")
                        .HasColumnType("bit");

                    b.Property<byte[]>("LeasePhoto")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Document");

                    b.HasData(
                        new
                        {
                            DocumentId = "35fa3a0a-bef8-4477-b708-99daa0147d9c",
                            IdPhoto = new byte[0],
                            IsIdVerified = false,
                            LeasePhoto = new byte[0],
                            UserId = "1bc9c43c-d59d-4e87-9821-e3981c850e52"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PropertyId");

                    b.HasIndex("PropertyManagerId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Address = "742 Evergreen Terrace",
                            PropertyManagerId = "97436b4a-0035-409b-9bd7-6133c7f30fdf"
                        },
                        new
                        {
                            PropertyId = 2,
                            Address = "The Montana",
                            PropertyManagerId = "3b19b9ef-6382-4c6d-9bb8-5c2a0a72fcfe"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UnitId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedOn = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Massive Leak from the Kitchen pipe",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Massive Leakage",
                            Severity = 2,
                            Status = 0,
                            TenantId = "1bc9c43c-d59d-4e87-9821-e3981c850e52",
                            UnitId = 1
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedOn = new DateTime(2021, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need repairing the floors from last earthquake",
                            EstimatedDate = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Earthquake repair",
                            Severity = 1,
                            Status = 0,
                            TenantId = "1bc9c43c-d59d-4e87-9821-e3981c850e52",
                            UnitId = 1
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedOn = new DateTime(1999, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need to fix the roof that was damaged by the tornado",
                            EstimatedDate = new DateTime(2000, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Tornado damage",
                            Severity = 2,
                            Status = 1,
                            TenantId = "5b5b3497-5650-4075-86d8-d7884615d1cb",
                            UnitId = 2
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedOn = new DateTime(2019, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Currently getting by with rat traps",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Rat infestation",
                            Severity = 1,
                            Status = 0,
                            TenantId = "5b5b3497-5650-4075-86d8-d7884615d1cb",
                            UnitId = 2
                        });
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"), 1L, 1);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int");

                    b.HasKey("UnitId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            PropertyId = 1,
                            UnitNo = 101
                        },
                        new
                        {
                            UnitId = 2,
                            PropertyId = 2,
                            UnitNo = 500
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "29c186a2-8349-49a7-8cde-141edfa83a39",
                            ConcurrencyStamp = "c7dffc4b-8f32-4b6a-bc5f-34436df7a38d",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "1e23865f-d59e-4e93-97e7-5f8287148c57",
                            ConcurrencyStamp = "ad75de7d-6605-42c8-96bb-95b5fe6cf479",
                            Name = "PropertyManager",
                            NormalizedName = "PROPERTYMANAGER"
                        },
                        new
                        {
                            Id = "897761cb-e339-4348-ad61-5212e712bb61",
                            ConcurrencyStamp = "6419a7fa-1675-4ea2-9a2d-5781e13275dc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "eaa23b1e-2595-46f2-bce7-3d15deb81121",
                            ConcurrencyStamp = "f7959be0-aab5-4140-ac88-28e24d82c244",
                            Name = "Tenant",
                            NormalizedName = "TENANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1c3071e7-f6e4-45ed-86ef-2a2f58898efd",
                            RoleId = "eaa23b1e-2595-46f2-bce7-3d15deb81121"
                        },
                        new
                        {
                            UserId = "1c3071e7-f6e4-45ed-86ef-2a2f58898efd",
                            RoleId = "1e23865f-d59e-4e93-97e7-5f8287148c57"
                        },
                        new
                        {
                            UserId = "1c3071e7-f6e4-45ed-86ef-2a2f58898efd",
                            RoleId = "897761cb-e339-4348-ad61-5212e712bb61"
                        },
                        new
                        {
                            UserId = "1c3071e7-f6e4-45ed-86ef-2a2f58898efd",
                            RoleId = "29c186a2-8349-49a7-8cde-141edfa83a39"
                        },
                        new
                        {
                            UserId = "97436b4a-0035-409b-9bd7-6133c7f30fdf",
                            RoleId = "1e23865f-d59e-4e93-97e7-5f8287148c57"
                        },
                        new
                        {
                            UserId = "3b19b9ef-6382-4c6d-9bb8-5c2a0a72fcfe",
                            RoleId = "1e23865f-d59e-4e93-97e7-5f8287148c57"
                        },
                        new
                        {
                            UserId = "1bc9c43c-d59d-4e87-9821-e3981c850e52",
                            RoleId = "eaa23b1e-2595-46f2-bce7-3d15deb81121"
                        },
                        new
                        {
                            UserId = "5b5b3497-5650-4075-86d8-d7884615d1cb",
                            RoleId = "eaa23b1e-2595-46f2-bce7-3d15deb81121"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tenants")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.Document", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "PropertyManager")
                        .WithMany()
                        .HasForeignKey("PropertyManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyManager");
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "Tenant")
                        .WithMany("Tickets")
                        .HasForeignKey("TenantId");

                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tickets")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.HasOne("chickadee.Models.Property", "Property")
                        .WithMany("Units")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Navigation("Tenants");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
