// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chickadee.Data;

#nullable disable

namespace chickadee.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "46d00a2e-4789-4f93-8de5-1a093c89af7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37546d88-9799-4ddc-b101-d5c72a3ec326",
                            DateOfBirth = new DateTime(1992, 5, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "superadmin@chickadeeinvest.ca",
                            EmailConfirmed = true,
                            FirstName = "Matt",
                            LastName = "Hardwick",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@CHICKADEEINVEST.CA",
                            NormalizedUserName = "SUPERADMIN@CHICKADEEINVEST.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBP7q8LEIfCX2HhjikUdcKZd+OPujtNx+WPNwtdDzfFGxrjv30FzlZxexPgj2M4yiw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c6dd28a4-f700-4f5c-8293-093de11a7bd8",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@chickadeeinvest.ca",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("chickadee.Models.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyId = "c301ae3c-8dba-4084-99a8-5084433537bf",
                            Address = "123 Main St",
                            Email = "main@companyOne.com",
                            Name = "Company One",
                            Phone = "604-235-7890"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages", (string)null);

                    b.HasData(
                        new
                        {
                            MessageId = "51c83a4e-3c41-4f98-9969-8f54de521059",
                            CreatedDate = new DateTime(2022, 10, 31, 23, 31, 42, 748, DateTimeKind.Local).AddTicks(8820),
                            SenderId = "feff6cc2-1836-4fdb-b9e7-0bea9776267a",
                            TicketId = 1,
                            content = "This is a message"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.ToTable("Property", (string)null);

                    b.HasData(
                        new
                        {
                            PropertyId = "0e440ddc-6f51-420f-8547-5f875d38597b",
                            Address = "742 Evergreen Terrace",
                            Name = "The Evergreen"
                        },
                        new
                        {
                            PropertyId = "1e97805f-9fb3-4f76-bc3a-33e5f2ab4632",
                            Address = "123 Sesame Street",
                            Name = "Montana Apartments"
                        },
                        new
                        {
                            PropertyId = "6a380d6b-1e0c-4f67-ba76-cf3aba65134e",
                            Address = "7488 Hazel Street",
                            Name = "Arcola"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UnitId");

                    b.ToTable("Ticket", (string)null);

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedById = "feff6cc2-1836-4fdb-b9e7-0bea9776267a",
                            CreatedOn = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Massive Leak from the Kitchen pipe",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Massive Leakage",
                            Severity = 2,
                            Status = 0,
                            UnitId = "ab465d48-26d5-4dc2-9fe7-1ab41f1481bc"
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedById = "feff6cc2-1836-4fdb-b9e7-0bea9776267a",
                            CreatedOn = new DateTime(2021, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need repairing the floors from last earthquake",
                            EstimatedDate = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Earthquake repair",
                            Severity = 1,
                            Status = 0,
                            UnitId = "ab465d48-26d5-4dc2-9fe7-1ab41f1481bc"
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedById = "811a2440-4658-40f1-bf45-3ecf36764b99",
                            CreatedOn = new DateTime(1999, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need to fix the roof that was damaged by the tornado",
                            EstimatedDate = new DateTime(2000, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Tornado damage",
                            Severity = 2,
                            Status = 1,
                            UnitId = "60a20617-99be-47cd-b26e-e044395286ab"
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedById = "811a2440-4658-40f1-bf45-3ecf36764b99",
                            CreatedOn = new DateTime(2019, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Currently getting by with rat traps",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Rat infestation",
                            Severity = 1,
                            Status = 0,
                            UnitId = "60a20617-99be-47cd-b26e-e044395286ab"
                        });
                });

            modelBuilder.Entity("chickadee.Models.TicketImage", b =>
                {
                    b.Property<string>("TicketImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("TicketImageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketImage", (string)null);
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("UnitId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyManagerId");

                    b.ToTable("Unit", (string)null);

                    b.HasData(
                        new
                        {
                            UnitId = "ab465d48-26d5-4dc2-9fe7-1ab41f1481bc",
                            PropertyId = "0e440ddc-6f51-420f-8547-5f875d38597b",
                            UnitNo = 101,
                            UnitType = 0
                        },
                        new
                        {
                            UnitId = "60a20617-99be-47cd-b26e-e044395286ab",
                            PropertyId = "1e97805f-9fb3-4f76-bc3a-33e5f2ab4632",
                            UnitNo = 500,
                            UnitType = 1
                        });
                });

            modelBuilder.Entity("chickadee.Models.UnitImage", b =>
                {
                    b.Property<string>("UnitImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UnitImageId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitImage", (string)null);
                });

            modelBuilder.Entity("chickadee.Models.UnitNote", b =>
                {
                    b.Property<string>("UnitNoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitNoteId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitNote", (string)null);
                });

            modelBuilder.Entity("chickadee.Models.VerificationDocument", b =>
                {
                    b.Property<string>("VerificationDocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("VerificationDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationDocuments", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7efef5ed-4517-43d8-a8d1-eab2e39ddc4f",
                            ConcurrencyStamp = "10c1174a-7f5c-48dc-b73e-6b99373bca07",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "22a58df4-5844-41c7-a13a-7ab88daf7a9e",
                            ConcurrencyStamp = "60713706-3d15-429c-8927-b4c686a745a5",
                            Name = "PropertyManager",
                            NormalizedName = "PROPERTYMANAGER"
                        },
                        new
                        {
                            Id = "8bff493c-7cf2-4a6b-9927-52f27891e2c8",
                            ConcurrencyStamp = "7952f1f6-ba67-4648-abf4-e0a2071b4b06",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "70e95cc9-3eb1-4672-9b2a-3e01227f4b12",
                            ConcurrencyStamp = "2310343a-d2d2-4f04-9980-5c96a089562e",
                            Name = "Tenant",
                            NormalizedName = "TENANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "46d00a2e-4789-4f93-8de5-1a093c89af7e",
                            RoleId = "70e95cc9-3eb1-4672-9b2a-3e01227f4b12"
                        },
                        new
                        {
                            UserId = "46d00a2e-4789-4f93-8de5-1a093c89af7e",
                            RoleId = "22a58df4-5844-41c7-a13a-7ab88daf7a9e"
                        },
                        new
                        {
                            UserId = "46d00a2e-4789-4f93-8de5-1a093c89af7e",
                            RoleId = "8bff493c-7cf2-4a6b-9927-52f27891e2c8"
                        },
                        new
                        {
                            UserId = "46d00a2e-4789-4f93-8de5-1a093c89af7e",
                            RoleId = "7efef5ed-4517-43d8-a8d1-eab2e39ddc4f"
                        },
                        new
                        {
                            UserId = "bb91da74-3da3-491c-a593-79b308dad0a6",
                            RoleId = "22a58df4-5844-41c7-a13a-7ab88daf7a9e"
                        },
                        new
                        {
                            UserId = "25b8b08b-85f4-481d-a3d1-5d74b924af73",
                            RoleId = "22a58df4-5844-41c7-a13a-7ab88daf7a9e"
                        },
                        new
                        {
                            UserId = "feff6cc2-1836-4fdb-b9e7-0bea9776267a",
                            RoleId = "70e95cc9-3eb1-4672-9b2a-3e01227f4b12"
                        },
                        new
                        {
                            UserId = "811a2440-4658-40f1-bf45-3ecf36764b99",
                            RoleId = "70e95cc9-3eb1-4672-9b2a-3e01227f4b12"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.HasBaseType("chickadee.Models.ApplicationUser");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("PropertyManager");

                    b.HasData(
                        new
                        {
                            Id = "bb91da74-3da3-491c-a593-79b308dad0a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "737219fe-e959-4bed-8f44-371068675c8d",
                            DateOfBirth = new DateTime(1992, 5, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "propertymanager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Property",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPB+uYgrZNQs1JryA7LIba419UsovNO1kS7X6bHAOMsb0sT+6rg1LdHuUVNjK5pR4g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "137b5429-fc43-44ee-ad9e-e6edaf3a6f5f",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager@gmail.com",
                            UsernameChangeLimit = 10
                        },
                        new
                        {
                            Id = "25b8b08b-85f4-481d-a3d1-5d74b924af73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c1474c5-9cdb-4758-a0fe-fac2c209cfb0",
                            DateOfBirth = new DateTime(1992, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "propertymanager2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Property",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER2@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDUt2OjLDzeL5ZSqyzV7jLlfFn46fmwwwUQqCeghBvKpmhd22SmOnE+lgll/sjYqpQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "363b9ee0-7126-4413-bcdb-878941f2dd23",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager2@gmail.com",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.HasBaseType("chickadee.Models.ApplicationUser");

                    b.Property<string>("LeaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UnitId");

                    b.HasDiscriminator().HasValue("Tenant");

                    b.HasData(
                        new
                        {
                            Id = "feff6cc2-1836-4fdb-b9e7-0bea9776267a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fd57c12-4b5c-4cd7-b1fd-623b5994cdca",
                            DateOfBirth = new DateTime(2002, 5, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "tenant@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tenant",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT@GMAIL.COM",
                            NormalizedUserName = "TENANT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELyjuCnKBYXy9uGJOU9J/pkWNRWf8OyRhzmFoXxJC/ae8M2x/HEjcJ4GLw+XYGNa3Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "66233ec2-78b6-4dc0-998b-b1e170ce50e4",
                            TwoFactorEnabled = false,
                            UserName = "tenant@gmail.com",
                            UsernameChangeLimit = 10,
                            UnitId = "ab465d48-26d5-4dc2-9fe7-1ab41f1481bc"
                        },
                        new
                        {
                            Id = "811a2440-4658-40f1-bf45-3ecf36764b99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a23e4f09-56e3-41e0-a886-f8a24ce49273",
                            DateOfBirth = new DateTime(2002, 5, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "tenant2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "Tenant",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT2@GMAIL.COM",
                            NormalizedUserName = "TENANT2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPpkBxFfb7BXDXtXEkxFdvt8aUnVnfwQXTNC0VCp/oQuKLwfThgU11+wGnyGJ5gvQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "313a91a1-9a62-452f-9dc5-49f1740529ec",
                            TwoFactorEnabled = false,
                            UserName = "tenant2@gmail.com",
                            UsernameChangeLimit = 10,
                            UnitId = "ab465d48-26d5-4dc2-9fe7-1ab41f1481bc"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Message", b =>
                {
                    b.HasOne("chickadee.Models.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "CreatedBy")
                        .WithMany("Tickets")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tickets")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.TicketImage", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "CreatedBy")
                        .WithMany("TicketImage")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.Ticket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.HasOne("chickadee.Models.Property", "Property")
                        .WithMany("Units")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.PropertyManager", "PropertyManager")
                        .WithMany("Units")
                        .HasForeignKey("PropertyManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Property");

                    b.Navigation("PropertyManager");
                });

            modelBuilder.Entity("chickadee.Models.UnitImage", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Images")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.UnitNote", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Notes")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.VerificationDocument", b =>
                {
                    b.HasOne("chickadee.Models.Tenant", "Tenant")
                        .WithMany("VerificationDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.HasOne("chickadee.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tenants")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TicketImage");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Notes");

                    b.Navigation("Tenants");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.Navigation("VerificationDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
