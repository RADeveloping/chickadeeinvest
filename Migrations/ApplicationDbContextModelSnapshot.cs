// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chickadee.Data;

#nullable disable

namespace chickadee.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "01409b96-6e51-43da-8df4-f93b0ab0be0e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b21ec62-695b-4f58-9a0c-d18a90bf7d3c",
                            DateOfBirth = new DateTime(1992, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "superadmin@chickadeeinvest.ca",
                            EmailConfirmed = true,
                            FirstName = "Matt",
                            LastName = "Hardwick",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@CHICKADEEINVEST.CA",
                            NormalizedUserName = "SUPERADMIN@CHICKADEEINVEST.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIlw0WEHfIRR7XMpKtYrZeDO3NqMeAZWFURpuFfx4PgfklM3C39+ZDmftxTa1P2G7g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ea57c3e4-1462-4695-abfb-587b54624813",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@chickadeeinvest.ca",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("chickadee.Models.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = "03458c45-1b93-4c2e-b240-a05f323d1043",
                            Address = "123 Main St",
                            Email = "main@companyOne.com",
                            Name = "Company One",
                            Phone = "604-235-7890"
                        },
                        new
                        {
                            CompanyId = "80536280-2b7c-4b3a-94ea-d72744978621",
                            Address = "Wall street",
                            Email = "main@companyTwo.com",
                            Name = "Company Two",
                            Phone = "778-334-4594"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = "d7f45d8e-7861-446b-8ba5-8562d48b8d79",
                            CreatedDate = new DateTime(2022, 11, 2, 21, 20, 24, 702, DateTimeKind.Local).AddTicks(1050),
                            SenderId = "36a8e77b-3d34-45dd-96f6-2172ed2a27ab",
                            TicketId = 1,
                            content = "This is a message"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            PropertyId = "2dd36174-1574-4c4d-a3bc-f2b40367729e",
                            Address = "742 Evergreen Terrace",
                            Name = "The Evergreen Managed By PM 1"
                        },
                        new
                        {
                            PropertyId = "1d7598a2-da08-4aef-83eb-bcd07d89e364",
                            Address = "123 Sesame Street",
                            Name = "Montana Apartments Managed By PM 2"
                        },
                        new
                        {
                            PropertyId = "c4916276-6195-4a5e-82a9-005d63529eaf",
                            Address = "7488 Hazel Street",
                            Name = "Arcola Managed by PM 2"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UnitId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedById = "36a8e77b-3d34-45dd-96f6-2172ed2a27ab",
                            CreatedOn = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Massive Leak from the Kitchen pipe",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Massive Leakage",
                            Severity = 2,
                            Status = 0,
                            UnitId = "d79a4b8d-bf26-48e4-a028-bee969fd3f2e"
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedById = "36a8e77b-3d34-45dd-96f6-2172ed2a27ab",
                            CreatedOn = new DateTime(2021, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need repairing the floors from last earthquake",
                            EstimatedDate = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Earthquake repair",
                            Severity = 1,
                            Status = 0,
                            UnitId = "d79a4b8d-bf26-48e4-a028-bee969fd3f2e"
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedById = "b98da993-9bb0-44ad-872e-b8c9dc0c2b02",
                            CreatedOn = new DateTime(1999, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need to fix the roof that was damaged by the tornado",
                            EstimatedDate = new DateTime(2000, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Tornado damage",
                            Severity = 2,
                            Status = 1,
                            UnitId = "bf3cb67c-001d-4a1f-a183-8d5c04fda045"
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedById = "b98da993-9bb0-44ad-872e-b8c9dc0c2b02",
                            CreatedOn = new DateTime(2019, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Currently getting by with rat traps",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Rat infestation",
                            Severity = 1,
                            Status = 0,
                            UnitId = "bf3cb67c-001d-4a1f-a183-8d5c04fda045"
                        });
                });

            modelBuilder.Entity("chickadee.Models.TicketImage", b =>
                {
                    b.Property<string>("TicketImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("TicketImageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketImage");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("UnitId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyManagerId");

                    b.ToTable("Unit");

                    b.HasData(
                        new
                        {
                            UnitId = "d79a4b8d-bf26-48e4-a028-bee969fd3f2e",
                            PropertyId = "2dd36174-1574-4c4d-a3bc-f2b40367729e",
                            PropertyManagerId = "113d60be-4d95-4e71-af76-14fb863714b5",
                            UnitNo = 100,
                            UnitType = 0
                        },
                        new
                        {
                            UnitId = "bf3cb67c-001d-4a1f-a183-8d5c04fda045",
                            PropertyId = "1d7598a2-da08-4aef-83eb-bcd07d89e364",
                            PropertyManagerId = "ce634af3-19de-44fc-a2e8-906b40ef213c",
                            UnitNo = 200,
                            UnitType = 1
                        },
                        new
                        {
                            UnitId = "34087940-d920-4cb6-97ea-19dd0b9d4df4",
                            PropertyId = "1d7598a2-da08-4aef-83eb-bcd07d89e364",
                            UnitNo = 300,
                            UnitType = 1
                        });
                });

            modelBuilder.Entity("chickadee.Models.UnitImage", b =>
                {
                    b.Property<string>("UnitImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UnitImageId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitImage");
                });

            modelBuilder.Entity("chickadee.Models.UnitNote", b =>
                {
                    b.Property<string>("UnitNoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitNoteId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitNote");
                });

            modelBuilder.Entity("chickadee.Models.VerificationDocument", b =>
                {
                    b.Property<string>("VerificationDocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("VerificationDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationDocuments");

                    b.HasData(
                        new
                        {
                            VerificationDocumentId = "00000000-0000-0000-0000-000000000000",
                            DocumentType = 0,
                            TenantId = "36a8e77b-3d34-45dd-96f6-2172ed2a27ab",
                            data = new byte[0]
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "279c68e2-0ec1-4302-8781-7fd89e501e19",
                            ConcurrencyStamp = "d4b04af2-7469-41a1-863a-0ec53931a3c4",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "b63be28e-d46f-4778-87e9-0585a959ed98",
                            ConcurrencyStamp = "7823a78e-d3d5-46ac-8ab4-1fe518475cb3",
                            Name = "PropertyManager",
                            NormalizedName = "PROPERTYMANAGER"
                        },
                        new
                        {
                            Id = "cc3edf1d-3ee9-43c2-8c9a-b730ec8a9028",
                            ConcurrencyStamp = "97e1adf1-3b93-4ece-b565-2086bc929a92",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c271b12e-83a2-4334-aa5e-25d1976fe8e3",
                            ConcurrencyStamp = "397d1a86-9d98-45a9-b4af-1c8ed7cb79bc",
                            Name = "Tenant",
                            NormalizedName = "TENANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "01409b96-6e51-43da-8df4-f93b0ab0be0e",
                            RoleId = "c271b12e-83a2-4334-aa5e-25d1976fe8e3"
                        },
                        new
                        {
                            UserId = "01409b96-6e51-43da-8df4-f93b0ab0be0e",
                            RoleId = "b63be28e-d46f-4778-87e9-0585a959ed98"
                        },
                        new
                        {
                            UserId = "01409b96-6e51-43da-8df4-f93b0ab0be0e",
                            RoleId = "cc3edf1d-3ee9-43c2-8c9a-b730ec8a9028"
                        },
                        new
                        {
                            UserId = "01409b96-6e51-43da-8df4-f93b0ab0be0e",
                            RoleId = "279c68e2-0ec1-4302-8781-7fd89e501e19"
                        },
                        new
                        {
                            UserId = "113d60be-4d95-4e71-af76-14fb863714b5",
                            RoleId = "b63be28e-d46f-4778-87e9-0585a959ed98"
                        },
                        new
                        {
                            UserId = "ce634af3-19de-44fc-a2e8-906b40ef213c",
                            RoleId = "b63be28e-d46f-4778-87e9-0585a959ed98"
                        },
                        new
                        {
                            UserId = "36a8e77b-3d34-45dd-96f6-2172ed2a27ab",
                            RoleId = "c271b12e-83a2-4334-aa5e-25d1976fe8e3"
                        },
                        new
                        {
                            UserId = "b98da993-9bb0-44ad-872e-b8c9dc0c2b02",
                            RoleId = "c271b12e-83a2-4334-aa5e-25d1976fe8e3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.HasBaseType("chickadee.Models.ApplicationUser");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("PropertyManager");

                    b.HasData(
                        new
                        {
                            Id = "113d60be-4d95-4e71-af76-14fb863714b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5820560b-462c-4fff-830f-931996f399d7",
                            DateOfBirth = new DateTime(1992, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "propertymanager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Property",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAPfMJKeue4DsA42ukaoClZ3o8kEOy5nGZpcr8vet2bzevWYWvqybwpeyb+zASoKg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4a948a4f-8724-4ce5-b15e-e43b961f665a",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager@gmail.com",
                            UsernameChangeLimit = 10,
                            CompanyId = "03458c45-1b93-4c2e-b240-a05f323d1043"
                        },
                        new
                        {
                            Id = "ce634af3-19de-44fc-a2e8-906b40ef213c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c50b23ea-6d09-46c6-809e-104e387ff049",
                            DateOfBirth = new DateTime(1992, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "propertymanager2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Property",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER2@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF4xzVF/0TkefiunCS7d8BxLJqx8eht3DRGBv5Lpj8N4NcLgJ7wtVSRK10HhzRyouQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a887a81d-7588-4339-bea9-8c27742ae3c5",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager2@gmail.com",
                            UsernameChangeLimit = 10,
                            CompanyId = "80536280-2b7c-4b3a-94ea-d72744978621"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.HasBaseType("chickadee.Models.ApplicationUser");

                    b.Property<string>("LeaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("UnitId");

                    b.HasDiscriminator().HasValue("Tenant");

                    b.HasData(
                        new
                        {
                            Id = "36a8e77b-3d34-45dd-96f6-2172ed2a27ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26c6c4b3-d6ce-4316-a868-9d1400959a06",
                            DateOfBirth = new DateTime(2002, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "tenant@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tenant",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT@GMAIL.COM",
                            NormalizedUserName = "TENANT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEECKx2V4EYHSKlT54ZXOY9tFcPy21ueEfyMFD7R0hTmA8pX21PgK7KB2l/TLdYCl5g==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8ecdd8b7-b266-4bba-9305-9d221efaa95f",
                            TwoFactorEnabled = false,
                            UnitId = "d79a4b8d-bf26-48e4-a028-bee969fd3f2e",
                            UserName = "tenant@gmail.com",
                            UsernameChangeLimit = 10
                        },
                        new
                        {
                            Id = "b98da993-9bb0-44ad-872e-b8c9dc0c2b02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d243a73-ab45-4514-afe0-2e7330a16243",
                            DateOfBirth = new DateTime(2002, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "tenant2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "Tenant",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT2@GMAIL.COM",
                            NormalizedUserName = "TENANT2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECjnnKNmsFPe0HzoCOx6oWf9txqTR77eAR79AYx4TlfrVY9cof+GveNfVP88Z6nJ5w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b4e3fa37-2dc8-4485-8da9-c90aab143ab3",
                            TwoFactorEnabled = false,
                            UnitId = "bf3cb67c-001d-4a1f-a183-8d5c04fda045",
                            UserName = "tenant2@gmail.com",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("chickadee.Models.Message", b =>
                {
                    b.HasOne("chickadee.Models.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany("Messages")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("chickadee.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "CreatedBy")
                        .WithMany("Tickets")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tickets")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.TicketImage", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "CreatedBy")
                        .WithMany("TicketImage")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.Ticket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.HasOne("chickadee.Models.Property", "Property")
                        .WithMany("Units")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.PropertyManager", "PropertyManager")
                        .WithMany("Units")
                        .HasForeignKey("PropertyManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Property");

                    b.Navigation("PropertyManager");
                });

            modelBuilder.Entity("chickadee.Models.UnitImage", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Images")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.UnitNote", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Notes")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.VerificationDocument", b =>
                {
                    b.HasOne("chickadee.Models.Tenant", "Tenant")
                        .WithMany("VerificationDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.HasOne("chickadee.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tenants")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TicketImage");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Notes");

                    b.Navigation("Tenants");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.Navigation("VerificationDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
