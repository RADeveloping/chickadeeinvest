// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chickadee.Data;

#nullable disable

namespace chickadee.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221104012019_FIRST")]
    partial class FIRST
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "7b046f83-ae7a-4ad5-bd5b-b043f9376db0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6ea15b6-4151-4e99-9ac0-31399d4db002",
                            DateOfBirth = new DateTime(1992, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "superadmin@chickadeeinvest.ca",
                            EmailConfirmed = true,
                            FirstName = "Matt",
                            LastName = "Hardwick",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@CHICKADEEINVEST.CA",
                            NormalizedUserName = "SUPERADMIN@CHICKADEEINVEST.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJs2dsQ8X8LdYnAVCdu2PeQjHBaQeHSn+L2/QXTDnstGsnuW17LJfIQTeWTcWrzbw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "217c2e25-e388-44aa-8981-dbf0782b1261",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@chickadeeinvest.ca",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("chickadee.Models.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = "f3cd9953-4a90-42e3-9107-0389be70bb9e",
                            Address = "123 Main St",
                            Email = "main@companyOne.com",
                            Name = "Company One",
                            Phone = "604-235-7890"
                        },
                        new
                        {
                            CompanyId = "c3b7745a-5f9c-4c11-957f-1d7d058853a2",
                            Address = "Wall street",
                            Email = "main@companyTwo.com",
                            Name = "Company Two",
                            Phone = "778-334-4594"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = "38d33788-8083-48b5-b130-2170c11d2919",
                            CreatedDate = new DateTime(2022, 11, 2, 19, 20, 19, 321, DateTimeKind.Local).AddTicks(310),
                            SenderId = "9d190408-c67f-4537-96fe-f597a4d71db2",
                            TicketId = 1,
                            content = "This is a message"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            PropertyId = "0edbb36b-cb6d-44cb-ab65-25801fba3d3f",
                            Address = "742 Evergreen Terrace",
                            Name = "The Evergreen Managed By PM 1"
                        },
                        new
                        {
                            PropertyId = "a8facf3a-7804-460a-9b4f-5904dec7676c",
                            Address = "123 Sesame Street",
                            Name = "Montana Apartments Managed By PM 2"
                        },
                        new
                        {
                            PropertyId = "0b6581f7-65be-4a90-a0be-c2bb9a875d9b",
                            Address = "7488 Hazel Street",
                            Name = "Arcola Managed by PM 2"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UnitId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreatedById = "9d190408-c67f-4537-96fe-f597a4d71db2",
                            CreatedOn = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Massive Leak from the Kitchen pipe",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Massive Leakage",
                            Severity = 2,
                            Status = 0,
                            UnitId = "544c592b-2aa6-400e-93bf-ba0e4e374fc1"
                        },
                        new
                        {
                            TicketId = 2,
                            CreatedById = "9d190408-c67f-4537-96fe-f597a4d71db2",
                            CreatedOn = new DateTime(2021, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need repairing the floors from last earthquake",
                            EstimatedDate = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Earthquake repair",
                            Severity = 1,
                            Status = 0,
                            UnitId = "544c592b-2aa6-400e-93bf-ba0e4e374fc1"
                        },
                        new
                        {
                            TicketId = 3,
                            CreatedById = "4aea8f79-dd98-4cd4-8d14-a73614a14071",
                            CreatedOn = new DateTime(1999, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need to fix the roof that was damaged by the tornado",
                            EstimatedDate = new DateTime(2000, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Tornado damage",
                            Severity = 2,
                            Status = 1,
                            UnitId = "1484d40e-4524-4420-8678-1f3fd6e1b77d"
                        },
                        new
                        {
                            TicketId = 4,
                            CreatedById = "4aea8f79-dd98-4cd4-8d14-a73614a14071",
                            CreatedOn = new DateTime(2019, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Currently getting by with rat traps",
                            EstimatedDate = new DateTime(2022, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Problem = "Rat infestation",
                            Severity = 1,
                            Status = 0,
                            UnitId = "1484d40e-4524-4420-8678-1f3fd6e1b77d"
                        });
                });

            modelBuilder.Entity("chickadee.Models.TicketImage", b =>
                {
                    b.Property<string>("TicketImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("TicketImageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketImage");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("UnitId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyManagerId");

                    b.ToTable("Unit");

                    b.HasData(
                        new
                        {
                            UnitId = "544c592b-2aa6-400e-93bf-ba0e4e374fc1",
                            PropertyId = "0edbb36b-cb6d-44cb-ab65-25801fba3d3f",
                            PropertyManagerId = "bec808fc-37ff-4bda-97ca-aca24d0ca0d3",
                            UnitNo = 101,
                            UnitType = 0
                        },
                        new
                        {
                            UnitId = "1484d40e-4524-4420-8678-1f3fd6e1b77d",
                            PropertyId = "a8facf3a-7804-460a-9b4f-5904dec7676c",
                            PropertyManagerId = "e00c197a-ed94-42fd-8597-8712dec1a157",
                            UnitNo = 500,
                            UnitType = 1
                        });
                });

            modelBuilder.Entity("chickadee.Models.UnitImage", b =>
                {
                    b.Property<string>("UnitImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UnitImageId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitImage");
                });

            modelBuilder.Entity("chickadee.Models.UnitNote", b =>
                {
                    b.Property<string>("UnitNoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitNoteId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitNote");
                });

            modelBuilder.Entity("chickadee.Models.VerificationDocument", b =>
                {
                    b.Property<string>("VerificationDocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("VerificationDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationDocuments");

                    b.HasData(
                        new
                        {
                            VerificationDocumentId = "00000000-0000-0000-0000-000000000000",
                            DocumentType = 0,
                            TenantId = "9d190408-c67f-4537-96fe-f597a4d71db2",
                            data = new byte[0]
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "799a31af-c25d-4c71-8f80-1e3e2c0eed59",
                            ConcurrencyStamp = "20f37b3f-89bc-4a20-913d-5c5eec4219e8",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "d5286bc0-f7ef-43e8-baa3-e45f249fd68b",
                            ConcurrencyStamp = "843d89fa-6187-42ce-8a9b-8c44698b827e",
                            Name = "PropertyManager",
                            NormalizedName = "PROPERTYMANAGER"
                        },
                        new
                        {
                            Id = "8a351eb5-a618-4de9-9cf3-00ffaa905238",
                            ConcurrencyStamp = "0fdab990-fd7b-4621-9b40-ca2a6c1de7a8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b5058426-f860-4226-9d36-3504ad69ef13",
                            ConcurrencyStamp = "7301fe74-6622-4b97-b305-fd8170d751b7",
                            Name = "Tenant",
                            NormalizedName = "TENANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7b046f83-ae7a-4ad5-bd5b-b043f9376db0",
                            RoleId = "b5058426-f860-4226-9d36-3504ad69ef13"
                        },
                        new
                        {
                            UserId = "7b046f83-ae7a-4ad5-bd5b-b043f9376db0",
                            RoleId = "d5286bc0-f7ef-43e8-baa3-e45f249fd68b"
                        },
                        new
                        {
                            UserId = "7b046f83-ae7a-4ad5-bd5b-b043f9376db0",
                            RoleId = "8a351eb5-a618-4de9-9cf3-00ffaa905238"
                        },
                        new
                        {
                            UserId = "7b046f83-ae7a-4ad5-bd5b-b043f9376db0",
                            RoleId = "799a31af-c25d-4c71-8f80-1e3e2c0eed59"
                        },
                        new
                        {
                            UserId = "bec808fc-37ff-4bda-97ca-aca24d0ca0d3",
                            RoleId = "d5286bc0-f7ef-43e8-baa3-e45f249fd68b"
                        },
                        new
                        {
                            UserId = "e00c197a-ed94-42fd-8597-8712dec1a157",
                            RoleId = "d5286bc0-f7ef-43e8-baa3-e45f249fd68b"
                        },
                        new
                        {
                            UserId = "9d190408-c67f-4537-96fe-f597a4d71db2",
                            RoleId = "b5058426-f860-4226-9d36-3504ad69ef13"
                        },
                        new
                        {
                            UserId = "4aea8f79-dd98-4cd4-8d14-a73614a14071",
                            RoleId = "b5058426-f860-4226-9d36-3504ad69ef13"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.HasBaseType("chickadee.Models.ApplicationUser");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("PropertyManager");

                    b.HasData(
                        new
                        {
                            Id = "bec808fc-37ff-4bda-97ca-aca24d0ca0d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "888e7e08-210c-4b4d-9958-ff9786f0a65d",
                            DateOfBirth = new DateTime(1992, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "propertymanager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Property",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiOURgjXCLinUMGMVRS3j6CeboY2gx7j/bKL56AgFYZ+PfSEArwMUQwKYjA8Qo8fQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "aaa7c3a4-548b-4b73-a0fd-13d4bc25f59a",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager@gmail.com",
                            UsernameChangeLimit = 10,
                            CompanyId = "f3cd9953-4a90-42e3-9107-0389be70bb9e"
                        },
                        new
                        {
                            Id = "e00c197a-ed94-42fd-8597-8712dec1a157",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d98322a-354a-4f12-949f-a41cb67765f5",
                            DateOfBirth = new DateTime(1992, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "propertymanager2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Property",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPERTYMANAGER2@GMAIL.COM",
                            NormalizedUserName = "PROPERTYMANAGER2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELigpfLNVoKRSPULNdPs7VpJ81zGRkBMO/dszDKgWiRKJijEV677Nj9KOUXypnDJbg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ff46b2d0-6ea3-49b1-b5fb-0b00836fb2f4",
                            TwoFactorEnabled = false,
                            UserName = "propertymanager2@gmail.com",
                            UsernameChangeLimit = 10,
                            CompanyId = "c3b7745a-5f9c-4c11-957f-1d7d058853a2"
                        });
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.HasBaseType("chickadee.Models.ApplicationUser");

                    b.Property<string>("LeaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("UnitId");

                    b.HasDiscriminator().HasValue("Tenant");

                    b.HasData(
                        new
                        {
                            Id = "9d190408-c67f-4537-96fe-f597a4d71db2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8adf777-71c0-4c68-b313-d2d0a2a02b58",
                            DateOfBirth = new DateTime(2002, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "tenant@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tenant",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT@GMAIL.COM",
                            NormalizedUserName = "TENANT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPXLmnmSc1hiu8pE6SxysvZIjbgG/xFysmmImOJWaLcmh5oLwnF+AmBFYBHtrHqa4Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "be4b17fc-1238-4e96-9abb-380ee6858524",
                            TwoFactorEnabled = false,
                            UnitId = "544c592b-2aa6-400e-93bf-ba0e4e374fc1",
                            UserName = "tenant@gmail.com",
                            UsernameChangeLimit = 10
                        },
                        new
                        {
                            Id = "4aea8f79-dd98-4cd4-8d14-a73614a14071",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "897cb52b-b5e7-4dcb-8a26-9f5f4b183645",
                            DateOfBirth = new DateTime(2002, 5, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "tenant2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "Tenant",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT2@GMAIL.COM",
                            NormalizedUserName = "TENANT2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGxoHE7AcI5DrjSEZtj4N7I0wn5kLiO9bQiwNVIY1EoZkibSos/Sb/BYvmdDlQNyzw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f94da4ea-9aa2-4d46-bf1b-58169ccf898f",
                            TwoFactorEnabled = false,
                            UnitId = "1484d40e-4524-4420-8678-1f3fd6e1b77d",
                            UserName = "tenant2@gmail.com",
                            UsernameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("chickadee.Models.Message", b =>
                {
                    b.HasOne("chickadee.Models.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany("Messages")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("chickadee.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "CreatedBy")
                        .WithMany("Tickets")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tickets")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.TicketImage", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", "CreatedBy")
                        .WithMany("TicketImage")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.Ticket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.HasOne("chickadee.Models.Property", "Property")
                        .WithMany("Units")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.PropertyManager", "PropertyManager")
                        .WithMany("Units")
                        .HasForeignKey("PropertyManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Property");

                    b.Navigation("PropertyManager");
                });

            modelBuilder.Entity("chickadee.Models.UnitImage", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Images")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.UnitNote", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Notes")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.VerificationDocument", b =>
                {
                    b.HasOne("chickadee.Models.Tenant", "Tenant")
                        .WithMany("VerificationDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("chickadee.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.HasOne("chickadee.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.HasOne("chickadee.Models.Unit", "Unit")
                        .WithMany("Tenants")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("chickadee.Models.ApplicationUser", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TicketImage");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("chickadee.Models.Property", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("chickadee.Models.Ticket", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("chickadee.Models.Unit", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Notes");

                    b.Navigation("Tenants");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("chickadee.Models.PropertyManager", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("chickadee.Models.Tenant", b =>
                {
                    b.Navigation("VerificationDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
